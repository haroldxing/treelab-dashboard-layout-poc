webpackHotUpdate_N_E("pages/demo",{

/***/ "./components/GridLayout/lib/build/ReactGridLayout.js":
/*!************************************************************!*\
  !*** ./components/GridLayout/lib/build/ReactGridLayout.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(module) {\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _lodash = _interopRequireDefault(__webpack_require__(/*! lodash.isequal */ \"./node_modules/lodash.isequal/index.js\"));\n\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));\n\nvar _utils = __webpack_require__(/*! ./utils */ \"./components/GridLayout/lib/build/utils.js\");\n\nvar _calculateUtils = __webpack_require__(/*! ./calculateUtils */ \"./components/GridLayout/lib/build/calculateUtils.js\");\n\nvar _GridItem = _interopRequireDefault(__webpack_require__(/*! ./GridItem */ \"./components/GridLayout/lib/build/GridItem.js\"));\n\nvar _ReactGridLayoutPropTypes = _interopRequireDefault(__webpack_require__(/*! ./ReactGridLayoutPropTypes */ \"./components/GridLayout/lib/build/ReactGridLayoutPropTypes.js\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // End Types\n\n\nvar layoutClassName = \"react-grid-layout\";\nvar isFirefox = false; // Try...catch will protect from navigator not existing (e.g. node) or a bad implementation of navigator\n\ntry {\n  isFirefox = /firefox/i.test(navigator.userAgent);\n} catch (e) {\n  /* Ignore */\n}\n/**\n * A reactive, fluid grid layout with draggable, resizable components.\n */\n\n\nvar ReactGridLayout = /*#__PURE__*/function (_React$Component) {\n  _inherits(ReactGridLayout, _React$Component);\n\n  var _super = _createSuper(ReactGridLayout); // TODO publish internal ReactClass displayName transform\n  // Refactored to another module to make way for preval\n\n\n  function ReactGridLayout(props,\n  /*: Props*/\n  context\n  /*: any*/\n  ) {\n    /*: void*/\n    var _this;\n\n    _classCallCheck(this, ReactGridLayout);\n\n    _this = _super.call(this, props, context);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      activeDrag: null,\n      layout: (0, _utils.synchronizeLayoutWithChildren)(_this.props.layout, _this.props.children, _this.props.cols, // Legacy support for verticalCompact: false\n      (0, _utils.compactType)(_this.props)),\n      mounted: false,\n      oldDragItem: null,\n      oldLayout: null,\n      oldResizeItem: null,\n      droppingDOMNode: null,\n      children: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragEnterCounter\", 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragOver\", function (e\n    /*: DragOverEvent*/\n    ) {\n      // we should ignore events from layout's children in Firefox\n      // to avoid unpredictable jumping of a dropping placeholder\n      // FIXME remove this hack\n      if (isFirefox && e.nativeEvent.target.className.indexOf(layoutClassName) === -1) {\n        // without this Firefox will not allow drop if currently over droppingItem\n        e.preventDefault();\n        return false;\n      }\n\n      var _this$props = _this.props,\n          droppingItem = _this$props.droppingItem,\n          margin = _this$props.margin,\n          cols = _this$props.cols,\n          rowHeight = _this$props.rowHeight,\n          maxRows = _this$props.maxRows,\n          width = _this$props.width,\n          containerPadding = _this$props.containerPadding;\n      var layout = _this.state.layout; // This is relative to the DOM element that this event fired for.\n\n      var _e$nativeEvent = e.nativeEvent,\n          layerX = _e$nativeEvent.layerX,\n          layerY = _e$nativeEvent.layerY;\n      var droppingPosition = {\n        left: layerX,\n        top: layerY,\n        e: e\n      };\n\n      if (!_this.state.droppingDOMNode) {\n        var positionParams =\n        /*: PositionParams*/\n        {\n          cols: cols,\n          margin: margin,\n          maxRows: maxRows,\n          rowHeight: rowHeight,\n          containerWidth: width,\n          containerPadding: containerPadding || margin\n        };\n        var calculatedPosition = (0, _calculateUtils.calcXY)(positionParams, layerY, layerX, droppingItem.w, droppingItem.h);\n\n        _this.setState({\n          droppingDOMNode: /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n            key: droppingItem.i\n          }),\n          droppingPosition: droppingPosition,\n          layout: [].concat(_toConsumableArray(layout), [_objectSpread(_objectSpread({}, droppingItem), {}, {\n            x: calculatedPosition.x,\n            y: calculatedPosition.y,\n            \"static\": false,\n            isDraggable: true\n          })])\n        });\n      } else if (_this.state.droppingPosition) {\n        var _this$state$droppingP = _this.state.droppingPosition,\n            left = _this$state$droppingP.left,\n            top = _this$state$droppingP.top;\n        var shouldUpdatePosition = left != layerX || top != layerY;\n\n        if (shouldUpdatePosition) {\n          _this.setState({\n            droppingPosition: droppingPosition\n          });\n        }\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeDroppingPlaceholder\", function () {\n      var _this$props2 = _this.props,\n          droppingItem = _this$props2.droppingItem,\n          cols = _this$props2.cols;\n      var layout = _this.state.layout;\n      var newLayout = (0, _utils.compact)(layout.filter(function (l) {\n        return l.i !== droppingItem.i;\n      }), (0, _utils.compactType)(_this.props), cols);\n\n      _this.setState({\n        layout: newLayout,\n        droppingDOMNode: null,\n        activeDrag: null,\n        droppingPosition: undefined\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragLeave\", function () {\n      _this.dragEnterCounter--; // onDragLeave can be triggered on each layout's child.\n      // But we know that count of dragEnter and dragLeave events\n      // will be balanced after leaving the layout's container\n      // so we can increase and decrease count of dragEnter and\n      // when it'll be equal to 0 we'll remove the placeholder\n\n      if (_this.dragEnterCounter === 0) {\n        _this.removeDroppingPlaceholder();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnter\", function () {\n      _this.dragEnterCounter++;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDrop\", function (e\n    /*: Event*/\n    ) {\n      var droppingItem = _this.props.droppingItem;\n      var layout = _this.state.layout;\n      var item = layout.find(function (l) {\n        return l.i === droppingItem.i;\n      }); // reset dragEnter counter on drop\n\n      _this.dragEnterCounter = 0;\n\n      _this.removeDroppingPlaceholder();\n\n      _this.props.onDrop(layout, item, e);\n    });\n\n    (0, _utils.autoBindHandlers)(_assertThisInitialized(_this), [\"onDragStart\", \"onDrag\", \"onDragStop\", \"onResizeStart\", \"onResize\", \"onResizeStop\"]);\n    return _this;\n  }\n\n  _createClass(ReactGridLayout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        mounted: true\n      }); // Possibly call back with layout on mount. This should be done after correcting the layout width\n      // to ensure we don't rerender with the wrong width.\n\n      this.onLayoutMaybeChanged(this.state.layout, this.props.layout);\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps,\n    /*: Props*/\n    nextState\n    /*: State*/\n    ) {\n      return (// NOTE: this is almost always unequal. Therefore the only way to get better performance\n        // from SCU is if the user intentionally memoizes children. If they do, and they can\n        // handle changes properly, performance will increase.\n        this.props.children !== nextProps.children || !(0, _utils.fastRGLPropsEqual)(this.props, nextProps, _lodash[\"default\"]) || this.state.activeDrag !== nextState.activeDrag || this.state.mounted !== nextState.mounted || this.state.droppingPosition !== nextState.droppingPosition\n      );\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps,\n    /*: Props*/\n    prevState\n    /*: State*/\n    ) {\n      if (!this.state.activeDrag) {\n        var newLayout = this.state.layout;\n        var oldLayout = prevState.layout;\n        this.onLayoutMaybeChanged(newLayout, oldLayout);\n      }\n    }\n    /**\n     * Calculates a pixel value for the container.\n     * @return {String} Container height in pixels.\n     */\n\n  }, {\n    key: \"containerHeight\",\n    value: function containerHeight() {\n      if (!this.props.autoSize) return;\n      var nbRow = (0, _utils.bottom)(this.state.layout);\n      var containerPaddingY = this.props.containerPadding ? this.props.containerPadding[1] : this.props.margin[1];\n      return nbRow * this.props.rowHeight + (nbRow - 1) * this.props.margin[1] + containerPaddingY * 2 + \"px\";\n    }\n    /**\n     * When dragging starts\n     * @param {String} i Id of the child\n     * @param {Number} x X position of the move\n     * @param {Number} y Y position of the move\n     * @param {Event} e The mousedown event\n     * @param {Element} node The current dragging DOM element\n     */\n\n  }, {\n    key: \"onDragStart\",\n    value: function onDragStart(i,\n    /*: string*/\n    x,\n    /*: number*/\n    y,\n    /*: number*/\n    _ref) {\n      var e = _ref.e,\n          node = _ref.node;\n      var layout = this.state.layout;\n      var l = (0, _utils.getLayoutItem)(layout, i);\n      if (!l) return;\n      this.setState({\n        oldDragItem: (0, _utils.cloneLayoutItem)(l),\n        oldLayout: this.state.layout\n      });\n      return this.props.onDragStart(layout, l, l, null, e, node);\n    }\n    /**\n     * Each drag movement create a new dragelement and move the element to the dragged location\n     * @param {String} i Id of the child\n     * @param {Number} x X position of the move\n     * @param {Number} y Y position of the move\n     * @param {Event} e The mousedown event\n     * @param {Element} node The current dragging DOM element\n     */\n\n  }, {\n    key: \"onDrag\",\n    value: function onDrag(i,\n    /*: string*/\n    x,\n    /*: number*/\n    y,\n    /*: number*/\n    _ref2) {\n      var e = _ref2.e,\n          node = _ref2.node;\n      var oldDragItem = this.state.oldDragItem;\n      var layout = this.state.layout;\n      var cols = this.props.cols;\n      var l = (0, _utils.getLayoutItem)(layout, i);\n      if (!l) return; // Create placeholder (display only)\n\n      var placeholder = {\n        w: l.w,\n        h: l.h,\n        x: l.x,\n        y: l.y,\n        placeholder: true,\n        i: i\n      }; // Move the element to the dragged location.\n\n      var isUserAction = true;\n      layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, this.props.preventCollision, (0, _utils.compactType)(this.props), cols);\n      this.props.onDrag(layout, oldDragItem, l, placeholder, e, node);\n      this.setState({\n        layout: (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols),\n        activeDrag: placeholder\n      });\n    }\n    /**\n     * When dragging stops, figure out which position the element is closest to and update its x and y.\n     * @param  {String} i Index of the child.\n     * @param {Number} x X position of the move\n     * @param {Number} y Y position of the move\n     * @param {Event} e The mousedown event\n     * @param {Element} node The current dragging DOM element\n     */\n\n  }, {\n    key: \"onDragStop\",\n    value: function onDragStop(i,\n    /*: string*/\n    x,\n    /*: number*/\n    y,\n    /*: number*/\n    _ref3) {\n      var e = _ref3.e,\n          node = _ref3.node;\n      if (!this.state.activeDrag) return;\n      var oldDragItem = this.state.oldDragItem;\n      var layout = this.state.layout;\n      var _this$props3 = this.props,\n          cols = _this$props3.cols,\n          preventCollision = _this$props3.preventCollision;\n      var l = (0, _utils.getLayoutItem)(layout, i);\n      if (!l) return; // Move the element here\n\n      var isUserAction = true;\n      layout = (0, _utils.moveElement)(layout, l, x, y, isUserAction, preventCollision, (0, _utils.compactType)(this.props), cols);\n      this.props.onDragStop(layout, oldDragItem, l, null, e, node); // Set state\n\n      var newLayout = (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols);\n      var oldLayout = this.state.oldLayout;\n      this.setState({\n        activeDrag: null,\n        layout: newLayout,\n        oldDragItem: null,\n        oldLayout: null\n      });\n      this.onLayoutMaybeChanged(newLayout, oldLayout);\n    }\n  }, {\n    key: \"onLayoutMaybeChanged\",\n    value: function onLayoutMaybeChanged(newLayout,\n    /*: Layout*/\n    oldLayout\n    /*: ?Layout*/\n    ) {\n      if (!oldLayout) oldLayout = this.state.layout;\n\n      if (!(0, _lodash[\"default\"])(oldLayout, newLayout)) {\n        this.props.onLayoutChange(newLayout);\n      }\n    }\n  }, {\n    key: \"onResizeStart\",\n    value: function onResizeStart(i,\n    /*: string*/\n    w,\n    /*: number*/\n    h,\n    /*: number*/\n    _ref4) {\n      var e = _ref4.e,\n          node = _ref4.node;\n      var layout = this.state.layout;\n      var l = (0, _utils.getLayoutItem)(layout, i);\n      if (!l) return;\n      this.setState({\n        oldResizeItem: (0, _utils.cloneLayoutItem)(l),\n        oldLayout: this.state.layout\n      });\n      this.props.onResizeStart(layout, l, l, null, e, node);\n    }\n  }, {\n    key: \"onResize\",\n    value: function onResize(i,\n    /*: string*/\n    w,\n    /*: number*/\n    h,\n    /*: number*/\n    _ref5) {\n      var e = _ref5.e,\n          node = _ref5.node;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          oldResizeItem = _this$state.oldResizeItem;\n      var _this$props4 = this.props,\n          cols = _this$props4.cols,\n          preventCollision = _this$props4.preventCollision;\n      var l =\n      /*: ?LayoutItem*/\n      (0, _utils.getLayoutItem)(layout, i);\n      if (!l) return; // Something like quad tree should be used\n      // to find collisions faster\n\n      var hasCollisions;\n\n      if (preventCollision) {\n        var collisions = (0, _utils.getAllCollisions)(layout, _objectSpread(_objectSpread({}, l), {}, {\n          w: w,\n          h: h\n        })).filter(function (layoutItem) {\n          return layoutItem.i !== l.i;\n        });\n        hasCollisions = collisions.length > 0; // If we're colliding, we need adjust the placeholder.\n\n        if (hasCollisions) {\n          // adjust w && h to maximum allowed space\n          var leastX = Infinity,\n              leastY = Infinity;\n          collisions.forEach(function (layoutItem) {\n            if (layoutItem.x > l.x) leastX = Math.min(leastX, layoutItem.x);\n            if (layoutItem.y > l.y) leastY = Math.min(leastY, layoutItem.y);\n          });\n          if (Number.isFinite(leastX)) l.w = leastX - l.x;\n          if (Number.isFinite(leastY)) l.h = leastY - l.y;\n        }\n      }\n\n      if (!hasCollisions) {\n        // Set new width and height.\n        l.w = w;\n        l.h = h;\n      } // Create placeholder element (display only)\n\n\n      var placeholder = {\n        w: l.w,\n        h: l.h,\n        x: l.x,\n        y: l.y,\n        \"static\": true,\n        i: i\n      };\n      this.props.onResize(layout, oldResizeItem, l, placeholder, e, node); // Re-compact the layout and set the drag placeholder.\n\n      this.setState({\n        layout: (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols),\n        activeDrag: placeholder\n      });\n    }\n  }, {\n    key: \"onResizeStop\",\n    value: function onResizeStop(i,\n    /*: string*/\n    w,\n    /*: number*/\n    h,\n    /*: number*/\n    _ref6) {\n      var e = _ref6.e,\n          node = _ref6.node;\n      var _this$state2 = this.state,\n          layout = _this$state2.layout,\n          oldResizeItem = _this$state2.oldResizeItem;\n      var cols = this.props.cols;\n      var l = (0, _utils.getLayoutItem)(layout, i);\n      this.props.onResizeStop(layout, oldResizeItem, l, null, e, node); // Set state\n\n      var newLayout = (0, _utils.compact)(layout, (0, _utils.compactType)(this.props), cols);\n      var oldLayout = this.state.oldLayout;\n      this.setState({\n        activeDrag: null,\n        layout: newLayout,\n        oldResizeItem: null,\n        oldLayout: null\n      });\n      this.onLayoutMaybeChanged(newLayout, oldLayout);\n    }\n    /**\n     * Create a placeholder object.\n     * @return {Element} Placeholder div.\n     */\n\n  }, {\n    key: \"placeholder\",\n    value: function placeholder()\n    /*: ?ReactElement<any>*/\n    {\n      var activeDrag = this.state.activeDrag;\n      if (!activeDrag) return null;\n      var _this$props5 = this.props,\n          width = _this$props5.width,\n          cols = _this$props5.cols,\n          margin = _this$props5.margin,\n          containerPadding = _this$props5.containerPadding,\n          rowHeight = _this$props5.rowHeight,\n          maxRows = _this$props5.maxRows,\n          useCSSTransforms = _this$props5.useCSSTransforms,\n          transformScale = _this$props5.transformScale; // {...this.state.activeDrag} is pretty slow, actually\n\n      return /*#__PURE__*/_react[\"default\"].createElement(_GridItem[\"default\"], {\n        w: activeDrag.w,\n        h: activeDrag.h,\n        x: activeDrag.x,\n        y: activeDrag.y,\n        i: activeDrag.i,\n        className: \"react-grid-placeholder\",\n        containerWidth: width,\n        cols: cols,\n        margin: margin,\n        containerPadding: containerPadding || margin,\n        maxRows: maxRows,\n        rowHeight: rowHeight,\n        isDraggable: false,\n        isResizable: false,\n        isBounded: false,\n        useCSSTransforms: useCSSTransforms,\n        transformScale: transformScale\n      }, /*#__PURE__*/_react[\"default\"].createElement(\"div\", null));\n    }\n    /**\n     * Given a grid item, set its style attributes & surround in a <Draggable>.\n     * @param  {Element} child React element.\n     * @return {Element}       Element wrapped in draggable and properly placed.\n     */\n\n  }, {\n    key: \"processGridItem\",\n    value: function processGridItem(child,\n    /*: ReactElement<any>*/\n    isDroppingItem\n    /*: boolean*/\n    )\n    /*: ?ReactElement<any>*/\n    {\n      if (!child || !child.key) return;\n      var l = (0, _utils.getLayoutItem)(this.state.layout, String(child.key));\n      if (!l) return null;\n      var _this$props6 = this.props,\n          width = _this$props6.width,\n          cols = _this$props6.cols,\n          margin = _this$props6.margin,\n          containerPadding = _this$props6.containerPadding,\n          rowHeight = _this$props6.rowHeight,\n          maxRows = _this$props6.maxRows,\n          isDraggable = _this$props6.isDraggable,\n          isResizable = _this$props6.isResizable,\n          isBounded = _this$props6.isBounded,\n          useCSSTransforms = _this$props6.useCSSTransforms,\n          transformScale = _this$props6.transformScale,\n          draggableCancel = _this$props6.draggableCancel,\n          draggableHandle = _this$props6.draggableHandle,\n          resizeHandles = _this$props6.resizeHandles,\n          resizeHandle = _this$props6.resizeHandle;\n      var _this$state3 = this.state,\n          mounted = _this$state3.mounted,\n          droppingPosition = _this$state3.droppingPosition; // Determine user manipulations possible.\n      // If an item is static, it can't be manipulated by default.\n      // Any properties defined directly on the grid item will take precedence.\n\n      var draggable = typeof l.isDraggable === \"boolean\" ? l.isDraggable : !l[\"static\"] && isDraggable;\n      var resizable = typeof l.isResizable === \"boolean\" ? l.isResizable : !l[\"static\"] && isResizable;\n      var resizeHandlesOptions = l.resizeHandles || resizeHandles; // isBounded set on child if set on parent, and child is not explicitly false\n\n      var bounded = draggable && isBounded && l.isBounded !== false;\n      return /*#__PURE__*/_react[\"default\"].createElement(_GridItem[\"default\"], {\n        containerWidth: width,\n        cols: cols,\n        margin: margin,\n        containerPadding: containerPadding || margin,\n        maxRows: maxRows,\n        rowHeight: rowHeight,\n        cancel: draggableCancel,\n        handle: draggableHandle,\n        onDragStop: this.onDragStop,\n        onDragStart: this.onDragStart,\n        onDrag: this.onDrag,\n        onResizeStart: this.onResizeStart,\n        onResize: this.onResize,\n        onResizeStop: this.onResizeStop,\n        isDraggable: draggable,\n        isResizable: resizable,\n        isBounded: bounded,\n        useCSSTransforms: useCSSTransforms && mounted,\n        usePercentages: !mounted,\n        transformScale: transformScale,\n        w: l.w,\n        h: l.h,\n        x: l.x,\n        y: l.y,\n        i: l.i,\n        minH: l.minH,\n        minW: l.minW,\n        maxH: l.maxH,\n        maxW: l.maxW,\n        \"static\": l[\"static\"],\n        droppingPosition: isDroppingItem ? droppingPosition : undefined,\n        resizeHandles: resizeHandlesOptions,\n        resizeHandle: resizeHandle\n      }, child);\n    } // Called while dragging an element. Part of browser native drag/drop API.\n    // Native event target might be the layout itself, or an element within the layout.\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props7 = this.props,\n          className = _this$props7.className,\n          style = _this$props7.style,\n          isDroppable = _this$props7.isDroppable,\n          innerRef = _this$props7.innerRef;\n      var mergedClassName = (0, _classnames[\"default\"])(layoutClassName, className);\n\n      var mergedStyle = _objectSpread({\n        height: this.containerHeight()\n      }, style);\n\n      return /*#__PURE__*/_react[\"default\"].createElement(\"div\", {\n        ref: innerRef,\n        className: mergedClassName,\n        style: mergedStyle,\n        onDrop: isDroppable ? this.onDrop : _utils.noop,\n        onDragLeave: isDroppable ? this.onDragLeave : _utils.noop,\n        onDragEnter: isDroppable ? this.onDragEnter : _utils.noop,\n        onDragOver: isDroppable ? this.onDragOver : _utils.noop\n      }, _react[\"default\"].Children.map(this.props.children, function (child) {\n        return _this2.processGridItem(child);\n      }), isDroppable && this.state.droppingDOMNode && this.processGridItem(this.state.droppingDOMNode, true), this.placeholder());\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps,\n    /*: Props*/\n    prevState\n    /*: State*/\n    ) {\n      var newLayoutBase;\n\n      if (prevState.activeDrag) {\n        return null;\n      } // Legacy support for compactType\n      // Allow parent to set layout directly.\n\n\n      if (!(0, _lodash[\"default\"])(nextProps.layout, prevState.propsLayout) || nextProps.compactType !== prevState.compactType || !(0, _lodash[\"default\"])(nextProps.layout, prevState.layout) && nextProps.layout.length === prevState.layout.length) {\n        newLayoutBase = nextProps.layout;\n      } else if (!(0, _utils.childrenEqual)(nextProps.children, prevState.children)) {\n        // If children change, also regenerate the layout. Use our state\n        // as the base in case because it may be more up to date than\n        // what is in props.\n        newLayoutBase = prevState.layout;\n      } // We need to regenerate the layout.\n\n\n      if (newLayoutBase) {\n        var newLayout = (0, _utils.synchronizeLayoutWithChildren)(newLayoutBase, nextProps.children, nextProps.cols, (0, _utils.compactType)(nextProps));\n        return {\n          layout: newLayout,\n          // We need to save these props to state for using\n          // getDerivedStateFromProps instead of componentDidMount (in which we would get extra rerender)\n          compactType: nextProps.compactType,\n          children: nextProps.children,\n          propsLayout: nextProps.layout\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return ReactGridLayout;\n}(_react[\"default\"].Component);\n\nexports[\"default\"] = ReactGridLayout;\n\n_defineProperty(ReactGridLayout, \"displayName\", \"ReactGridLayout\");\n\n_defineProperty(ReactGridLayout, \"propTypes\", _ReactGridLayoutPropTypes[\"default\"]);\n\n_defineProperty(ReactGridLayout, \"defaultProps\", {\n  autoSize: true,\n  cols: 12,\n  className: \"\",\n  style: {},\n  draggableHandle: \"\",\n  draggableCancel: \"\",\n  containerPadding: null,\n  rowHeight: 150,\n  maxRows: Infinity,\n  // infinite vertical growth\n  layout: [],\n  margin: [10, 10],\n  isBounded: false,\n  isDraggable: true,\n  isResizable: true,\n  isDroppable: false,\n  useCSSTransforms: true,\n  transformScale: 1,\n  verticalCompact: true,\n  compactType: \"vertical\",\n  preventCollision: false,\n  droppingItem: {\n    i: \"__dropping-elem__\",\n    h: 1,\n    w: 1\n  },\n  resizeHandles: [\"se\"],\n  onLayoutChange: _utils.noop,\n  onDragStart: _utils.noop,\n  onDrag: _utils.noop,\n  onDragStop: _utils.noop,\n  onResizeStart: _utils.noop,\n  onResize: _utils.noop,\n  onResizeStop: _utils.noop,\n  onDrop: _utils.noop\n});\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/next/dist/compiled/webpack/module.js */ \"./node_modules/next/dist/compiled/webpack/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/GridLayout/lib/build/ReactGridLayout.js\n");

/***/ })

})